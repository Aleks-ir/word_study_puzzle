// Mocks generated by Mockito 5.1.0 from annotations
// in word_study_puzzle/test/presentation/bloc/categories_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:word_study_puzzle/domain/models/category.dart' as _i9;
import 'package:word_study_puzzle/domain/models/error.dart' as _i7;
import 'package:word_study_puzzle/domain/models/settings.dart' as _i15;
import 'package:word_study_puzzle/domain/models/success.dart' as _i8;
import 'package:word_study_puzzle/domain/repositories/category_repository.dart'
    as _i2;
import 'package:word_study_puzzle/domain/repositories/settings_repository.dart'
    as _i4;
import 'package:word_study_puzzle/domain/usecases/categories/create_category_usecase.dart'
    as _i5;
import 'package:word_study_puzzle/domain/usecases/categories/delete_category_usecase.dart'
    as _i12;
import 'package:word_study_puzzle/domain/usecases/categories/fetch_all_categories_usecase.dart'
    as _i10;
import 'package:word_study_puzzle/domain/usecases/categories/fetch_category_usecase.dart'
    as _i11;
import 'package:word_study_puzzle/domain/usecases/categories/update_category_usecase.dart'
    as _i13;
import 'package:word_study_puzzle/domain/usecases/settings/fetch_settings.dart'
    as _i14;
import 'package:word_study_puzzle/domain/usecases/settings/update_settings.dart'
    as _i16;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCategoryRepository_0 extends _i1.Fake
    implements _i2.CategoryRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeSettingsRepository_2 extends _i1.Fake
    implements _i4.SettingsRepository {}

/// A class which mocks [CreateCategoryUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateCategoryUsecase extends _i1.Mock
    implements _i5.CreateCategoryUsecase {
  MockCreateCategoryUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoryRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeCategoryRepository_0()) as _i2.CategoryRepository);
  @override
  _i6.Future<_i3.Either<_i7.Error, _i8.Success>> call(_i9.Category? category) =>
      (super.noSuchMethod(Invocation.method(#call, [category]),
              returnValue: Future<_i3.Either<_i7.Error, _i8.Success>>.value(
                  _FakeEither_1<_i7.Error, _i8.Success>()))
          as _i6.Future<_i3.Either<_i7.Error, _i8.Success>>);
}

/// A class which mocks [FetchAllCategoriesUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchAllCategoriesUsecase extends _i1.Mock
    implements _i10.FetchAllCategoriesUsecase {
  MockFetchAllCategoriesUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoryRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeCategoryRepository_0()) as _i2.CategoryRepository);
  @override
  _i6.Future<_i3.Either<_i7.Error, List<_i9.Category>>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
          returnValue: Future<_i3.Either<_i7.Error, List<_i9.Category>>>.value(
              _FakeEither_1<_i7.Error, List<_i9.Category>>())) as _i6
          .Future<_i3.Either<_i7.Error, List<_i9.Category>>>);
}

/// A class which mocks [FetchCategoryUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchCategoryUsecase extends _i1.Mock
    implements _i11.FetchCategoryUsecase {
  MockFetchCategoryUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoryRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeCategoryRepository_0()) as _i2.CategoryRepository);
  @override
  _i6.Future<_i3.Either<_i7.Error, _i9.Category>> call(String? title) =>
      (super.noSuchMethod(Invocation.method(#call, [title]),
              returnValue: Future<_i3.Either<_i7.Error, _i9.Category>>.value(
                  _FakeEither_1<_i7.Error, _i9.Category>()))
          as _i6.Future<_i3.Either<_i7.Error, _i9.Category>>);
}

/// A class which mocks [DeleteCategoryUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCategoryUsecase extends _i1.Mock
    implements _i12.DeleteCategoryUsecase {
  MockDeleteCategoryUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoryRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeCategoryRepository_0()) as _i2.CategoryRepository);
  @override
  _i6.Future<_i3.Either<_i7.Error, _i8.Success>> call(String? title) =>
      (super.noSuchMethod(Invocation.method(#call, [title]),
              returnValue: Future<_i3.Either<_i7.Error, _i8.Success>>.value(
                  _FakeEither_1<_i7.Error, _i8.Success>()))
          as _i6.Future<_i3.Either<_i7.Error, _i8.Success>>);
}

/// A class which mocks [UpdateCategoryUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCategoryUsecase extends _i1.Mock
    implements _i13.UpdateCategoryUsecase {
  MockUpdateCategoryUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoryRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeCategoryRepository_0()) as _i2.CategoryRepository);
  @override
  _i6.Future<_i3.Either<_i7.Error, _i8.Success>> call(_i9.Category? category) =>
      (super.noSuchMethod(Invocation.method(#call, [category]),
              returnValue: Future<_i3.Either<_i7.Error, _i8.Success>>.value(
                  _FakeEither_1<_i7.Error, _i8.Success>()))
          as _i6.Future<_i3.Either<_i7.Error, _i8.Success>>);
}

/// A class which mocks [FetchSettingsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchSettingsUsecase extends _i1.Mock
    implements _i14.FetchSettingsUsecase {
  MockFetchSettingsUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.SettingsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeSettingsRepository_2()) as _i4.SettingsRepository);
  @override
  _i6.Future<_i3.Either<_i7.Error, _i15.Settings>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue: Future<_i3.Either<_i7.Error, _i15.Settings>>.value(
                  _FakeEither_1<_i7.Error, _i15.Settings>()))
          as _i6.Future<_i3.Either<_i7.Error, _i15.Settings>>);
}

/// A class which mocks [UpdateSettingsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateSettingsUsecase extends _i1.Mock
    implements _i16.UpdateSettingsUsecase {
  MockUpdateSettingsUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.SettingsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeSettingsRepository_2()) as _i4.SettingsRepository);
  @override
  _i6.Future<_i3.Either<_i7.Error, _i8.Success>> call(
          _i15.Settings? settings) =>
      (super.noSuchMethod(Invocation.method(#call, [settings]),
              returnValue: Future<_i3.Either<_i7.Error, _i8.Success>>.value(
                  _FakeEither_1<_i7.Error, _i8.Success>()))
          as _i6.Future<_i3.Either<_i7.Error, _i8.Success>>);
}
