// Mocks generated by Mockito 5.1.0 from annotations
// in word_study_puzzle/test/domain/usecases/words/mock_word_repository.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:word_study_puzzle/data/dto/word_dto.dart' as _i2;
import 'package:word_study_puzzle/domain/repositories/word_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeWordDto_0 extends _i1.Fake implements _i2.WordDto {}

/// A class which mocks [WordRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWordRepository extends _i1.Mock implements _i3.WordRepository {
  MockWordRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.WordDto> getAllWords() =>
      (super.noSuchMethod(Invocation.method(#getAllWords, []),
          returnValue: <_i2.WordDto>[]) as List<_i2.WordDto>);
  @override
  _i4.Future<_i2.WordDto> getWord(String? title) =>
      (super.noSuchMethod(Invocation.method(#getWord, [title]),
              returnValue: Future<_i2.WordDto>.value(_FakeWordDto_0()))
          as _i4.Future<_i2.WordDto>);
  @override
  _i4.Future<_i2.WordDto> getRandomUnexploredWord(
          List<String>? exclusionaryList) =>
      (super.noSuchMethod(
              Invocation.method(#getRandomUnexploredWord, [exclusionaryList]),
              returnValue: Future<_i2.WordDto>.value(_FakeWordDto_0()))
          as _i4.Future<_i2.WordDto>);
  @override
  _i4.Future<dynamic> addWord(_i2.WordDto? word) =>
      (super.noSuchMethod(Invocation.method(#addWord, [word]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> updateWord(_i2.WordDto? word) =>
      (super.noSuchMethod(Invocation.method(#updateWord, [word]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> deleteWord(_i2.WordDto? word) =>
      (super.noSuchMethod(Invocation.method(#deleteWord, [word]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
}
