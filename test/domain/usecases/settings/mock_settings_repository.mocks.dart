// Mocks generated by Mockito 5.1.0 from annotations
// in words_3000_puzzle/test/domain/usecases/settings/mock_settings_repository.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:words_3000_puzzle/data/dto/settings_dto.dart' as _i2;
import 'package:words_3000_puzzle/domain/repositories/settings_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSettingsDto_0 extends _i1.Fake implements _i2.SettingsDto {}

/// A class which mocks [SettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsRepository extends _i1.Mock
    implements _i3.SettingsRepository {
  MockSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SettingsDto> getSettings(String? key) =>
      (super.noSuchMethod(Invocation.method(#getSettings, [key]),
              returnValue: Future<_i2.SettingsDto>.value(_FakeSettingsDto_0()))
          as _i4.Future<_i2.SettingsDto>);
  @override
  _i4.Future<dynamic> updateSettings(String? key, _i2.SettingsDto? settings) =>
      (super.noSuchMethod(Invocation.method(#updateSettings, [key, settings]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
}
